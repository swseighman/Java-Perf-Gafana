version: '2.4'

volumes:
    prometheus_data: {}
    grafana_data: {}

services:

  # Apps
  primes-openjdk:
    image: localhost/primes:openjdk.0.1
    restart: always
    mem_limit: 1024m
    memswap_limit: 1024m
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    depends_on:
      - "prom"
    ports:
      - "8085:8080"
  primes-graalee:
    image: localhost/primes:graalee.0.1
    restart: always
    mem_limit: 1024m
    memswap_limit: 1024m
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    depends_on:
      - "prom"
    ports:
      - "8086:8080"
  primes-native:
    image: localhost/primes:native.0.1
    restart: always
    mem_limit: 256m
    memswap_limit: 256m
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    depends_on:
      - "prom"
    ports:
      - "8087:8080"
  primes-native-g1:
    image: localhost/primes:nativeg1.0.1
    restart: always
    mem_limit: 256m
    memswap_limit: 256m
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    depends_on:
      - "prom"
    ports:
      - "8088:8080"
  primes-native-inst:
    image: localhost/primes:nativeinst.0.1
    restart: always
    mem_limit: 1024m
    memswap_limit: 1024m
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    volumes:
      - ./profiles:/profiles:rw
    # Pass in the location of the profile dump directory as an extra command param
    command:
      - "-XX:ProfilesDumpFile=/profiles/primes.iprof"
    depends_on:
      - "prom"
    ports:
      - "8089:8080"
  primes-native-opt:
    image: localhost/primes:nativeopt.0.1
    restart: always
    mem_limit: 256m
    memswap_limit: 256m
    cpu_count: 2
    cpu_percent: 100
    cpus: 2
    depends_on:
      - "prom"
    ports:
      - "8090:8080"

  # Reporting & Metrics
  ## Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /sys:/host/sys:ro
      - /proc:/host/proc:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
  ## Prometheus
  prom:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
  ## Grafana
  grafana:
    image: grafana/grafana
    depends_on:
      - prom
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
  ## CAdvisor
#  cadvisor:
#    image: gcr.io/cadvisor/cadvisor:v0.42.0
#    container_name: cadvisor
#    privileged: true
#    devices:
#      - /dev/kmsg:/dev/kmsg
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:ro
#      - /sys:/sys:ro
#      - /var/lib/docker:/var/lib/docker:ro
#      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
#    restart: unless-stopped
#    ports:
#      - 8090:8080


  # Stress Test Infra
#  stress-openjdk:
#    image: ricoli/hey
#    command: -n 10000000 http://primes-openjdk:8080
#    depends_on:
#      - "primes-openjdk"
#  stress-graalee:
#    image: ricoli/hey
#    command: -n 10000000 http://primes-graalee:8080
#    depends_on:
#      - "primes-graalee"
#  stress-native-ee:
#    image: ricoli/hey
#    command: -n 10000000 http://primes-native:8080
#    depends_on:
#      - "primes-native"
